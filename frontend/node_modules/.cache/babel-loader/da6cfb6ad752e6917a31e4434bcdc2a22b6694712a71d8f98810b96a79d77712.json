{"ast":null,"code":"const BASE_URL = 'http://localhost:5001/api/notify';\nexport const notifyApi = {\n  getAllNotifies: async () => {\n    try {\n      // Log before making request\n      console.log('Fetching notifications...');\n      const response = await fetch(BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n          // Add any additional headers if needed\n        }\n        // Add credentials if needed\n        // credentials: 'include',\n      });\n\n      // Log response details\n      console.log('Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch notifications');\n      }\n      const data = await response.json();\n      console.log('Fetched data:', data);\n      return data;\n    } catch (error) {\n      // Log detailed error information\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      });\n      throw error;\n    }\n  },\n  createNotify: async notifyData => {\n    try {\n      const response = await fetch(BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(notifyData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create notification');\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  },\n  updateNotifyStatus: async (id, status) => {\n    try {\n      const response = await fetch(`${BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update notification status');\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error updating notification status:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","notifyApi","getAllNotifies","console","log","response","fetch","method","headers","status","statusText","Object","fromEntries","entries","ok","errorData","json","Error","message","data","error","name","stack","createNotify","notifyData","body","JSON","stringify","updateNotifyStatus","id"],"sources":["C:/Project1/trap-monitor/frontend/src/api/notifyApi.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5001/api/notify';\r\n\r\nexport const notifyApi = {\r\n  getAllNotifies: async () => {\r\n    try {\r\n      // Log before making request\r\n      console.log('Fetching notifications...');\r\n\r\n      const response = await fetch(BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          // Add any additional headers if needed\r\n        },\r\n        // Add credentials if needed\r\n        // credentials: 'include',\r\n      });\r\n\r\n      // Log response details\r\n      console.log('Response:', {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        headers: Object.fromEntries(response.headers.entries())\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to fetch notifications');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data);\r\n      return data;\r\n    } catch (error) {\r\n      // Log detailed error information\r\n      console.error('Error details:', {\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createNotify: async (notifyData) => {\r\n    try {\r\n      const response = await fetch(BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(notifyData)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to create notification');\r\n      }\r\n      \r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateNotifyStatus: async (id, status) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update notification status');\r\n      }\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error updating notification status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AAEnD,OAAO,MAAMC,SAAS,GAAG;EACvBC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF;MACAC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAExC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAQ,EAAE;QACrCO,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;UAChB;QACF;QACA;QACA;MACF,CAAC,CAAC;;MAEF;MACAL,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE;QACvBK,MAAM,EAAEJ,QAAQ,CAACI,MAAM;QACvBC,UAAU,EAAEL,QAAQ,CAACK,UAAU;QAC/BF,OAAO,EAAEG,MAAM,CAACC,WAAW,CAACP,QAAQ,CAACG,OAAO,CAACK,OAAO,CAAC,CAAC;MACxD,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,+BAA+B,CAAC;MACvE;MAEA,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCb,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEe,IAAI,CAAC;MAClC,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAjB,OAAO,CAACiB,KAAK,CAAC,gBAAgB,EAAE;QAC9BC,IAAI,EAAED,KAAK,CAACC,IAAI;QAChBH,OAAO,EAAEE,KAAK,CAACF,OAAO;QACtBI,KAAK,EAAEF,KAAK,CAACE;MACf,CAAC,CAAC;MACF,MAAMF,KAAK;IACb;EACF,CAAC;EAEDG,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAQ,EAAE;QACrCO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAACnB,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIG,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEA,OAAOZ,QAAQ,CAACW,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDQ,kBAAkB,EAAE,MAAAA,CAAOC,EAAE,EAAEpB,MAAM,KAAK;IACxC,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,IAAI6B,EAAE,EAAE,EAAE;QAChDtB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAElB;QAAO,CAAC;MACjC,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIG,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,OAAOZ,QAAQ,CAACW,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}