{"ast":null,"code":"const BASE_URL = 'http://localhost:5001/api/notify';\nexport const notifyApi = {\n  getAllNotifies: async () => {\n    try {\n      const response = await fetch(BASE_URL);\n      if (!response.ok) {\n        throw new Error('Failed to fetch notifications');\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      throw error;\n    }\n  },\n  createNotify: async notifyData => {\n    try {\n      const response = await fetch(BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(notifyData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create notification');\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  },\n  updateNotifyStatus: async (id, status) => {\n    try {\n      const response = await fetch(`${BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update notification status');\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error updating notification status:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","notifyApi","getAllNotifies","response","fetch","ok","Error","json","error","console","createNotify","notifyData","method","headers","body","JSON","stringify","updateNotifyStatus","id","status"],"sources":["C:/Project1/trap-monitor/frontend/src/api/notifyApi.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5001/api/notify';\r\n\r\nexport const notifyApi = {\r\n  getAllNotifies: async () => {\r\n    try {\r\n      const response = await fetch(BASE_URL);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch notifications');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createNotify: async (notifyData) => {\r\n    try {\r\n      const response = await fetch(BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(notifyData)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to create notification');\r\n      }\r\n      \r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateNotifyStatus: async (id, status) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update notification status');\r\n      }\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error updating notification status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AAEnD,OAAO,MAAMC,SAAS,GAAG;EACvBC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,CAAC;MACtC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;QACrCY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDS,kBAAkB,EAAE,MAAAA,CAAOC,EAAE,EAAEC,MAAM,KAAK;IACxC,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIkB,EAAE,EAAE,EAAE;QAChDN,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEG;QAAO,CAAC;MACjC,CAAC,CAAC;MAEF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}