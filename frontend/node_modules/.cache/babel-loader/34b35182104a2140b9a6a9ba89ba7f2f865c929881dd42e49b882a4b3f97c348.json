{"ast":null,"code":"const BASE_URL = 'http://localhost:5001/api/notify';\nexport const notifyApi = {\n  getAllNotifies: async () => {\n    try {\n      console.log('Fetching notifications...');\n      const response = await fetch(BASE_URL);\n\n      // Log response status for debugging\n      console.log('Response status:', response.status);\n\n      // ถ้า response ไม่ ok ให้โยน error พร้อมข้อความ\n      if (!response.ok) {\n        let errorMessage = 'Failed to fetch notifications';\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorMessage;\n        } catch (e) {\n          // ถ้า parse json ไม่ได้ ใช้ statusText แทน\n          errorMessage = response.statusText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n      console.log('Notifications data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching notifications:', {\n        message: error.message,\n        stack: error.stack\n      });\n      // ส่ง error กลับไปให้ component จัดการ\n      throw error;\n    }\n  },\n  createNotify: async notifyData => {\n    try {\n      const response = await fetch(BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(notifyData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create notification');\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  },\n  updateNotifyStatus: async (id, status) => {\n    try {\n      const response = await fetch(`${BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update notification status');\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error updating notification status:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","notifyApi","getAllNotifies","console","log","response","fetch","status","ok","errorMessage","errorData","json","message","e","statusText","Error","data","error","stack","createNotify","notifyData","method","headers","body","JSON","stringify","updateNotifyStatus","id"],"sources":["C:/Project1/trap-monitor/frontend/src/api/notifyApi.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5001/api/notify';\r\n\r\nexport const notifyApi = {\r\n  getAllNotifies: async () => {\r\n    try {\r\n      console.log('Fetching notifications...');\r\n      \r\n      const response = await fetch(BASE_URL);\r\n      \r\n      // Log response status for debugging\r\n      console.log('Response status:', response.status);\r\n\r\n      // ถ้า response ไม่ ok ให้โยน error พร้อมข้อความ\r\n      if (!response.ok) {\r\n        let errorMessage = 'Failed to fetch notifications';\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.message || errorMessage;\r\n        } catch (e) {\r\n          // ถ้า parse json ไม่ได้ ใช้ statusText แทน\r\n          errorMessage = response.statusText || errorMessage;\r\n        }\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Notifications data:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', {\r\n        message: error.message,\r\n        stack: error.stack\r\n      });\r\n      // ส่ง error กลับไปให้ component จัดการ\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createNotify: async (notifyData) => {\r\n    try {\r\n      const response = await fetch(BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(notifyData)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to create notification');\r\n      }\r\n      \r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateNotifyStatus: async (id, status) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update notification status');\r\n      }\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error updating notification status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AAEnD,OAAO,MAAMC,SAAS,GAAG;EACvBC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAExC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAQ,CAAC;;MAEtC;MACAG,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACE,MAAM,CAAC;;MAEhD;MACA,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;QAChB,IAAIC,YAAY,GAAG,+BAA+B;QAClD,IAAI;UACF,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UACvCF,YAAY,GAAGC,SAAS,CAACE,OAAO,IAAIH,YAAY;QAClD,CAAC,CAAC,OAAOI,CAAC,EAAE;UACV;UACAJ,YAAY,GAAGJ,QAAQ,CAACS,UAAU,IAAIL,YAAY;QACpD;QACA,MAAM,IAAIM,KAAK,CAACN,YAAY,CAAC;MAC/B;MAEA,MAAMO,IAAI,GAAG,MAAMX,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCR,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEY,IAAI,CAAC;MACxC,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,+BAA+B,EAAE;QAC7CL,OAAO,EAAEK,KAAK,CAACL,OAAO;QACtBM,KAAK,EAAED,KAAK,CAACC;MACf,CAAC,CAAC;MACF;MACA,MAAMD,KAAK;IACb;EACF,CAAC;EAEDE,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAQ,EAAE;QACrCqB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIO,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEA,OAAOV,QAAQ,CAACM,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDS,kBAAkB,EAAE,MAAAA,CAAOC,EAAE,EAAEpB,MAAM,KAAK;IACxC,IAAI;MACF,MAAMF,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,IAAI2B,EAAE,EAAE,EAAE;QAChDN,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAElB;QAAO,CAAC;MACjC,CAAC,CAAC;MAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIO,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,OAAOV,QAAQ,CAACM,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}